fieldset {
    padding: 0;
    margin: 0;
    border: 0;
    min-width: 0;
}

legend {
    display: block;
    width: 100%;
    padding: 0;
    margin-bottom: $line-height-computed;
    font-size: ($font-size-base * 1.5);
    line-height: inherit;
    color: $legend-color;
    border: 0;
    border-bottom: 1px solid $legend-border-color;
}

label {
    display: inline-block;
    max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
    margin-bottom: 5px;
    font-weight: 600;
    text-transform: uppercase;
    font-size: $font-small;

    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


//
// Normalize form controls
//

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
    box-sizing: border-box;
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
    margin: 4px 0 0;
    margin-top: 1px \9; // IE8-9
    line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
    display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
    display: block;
    width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
    height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
    @include tab-focus();
}

// Adjust output element
output {
    display: block;
    padding-top: ($padding-base-vertical + 1);
    font-size: $font-size-base;
    line-height: $line-height-base;
    color: $input-color;
}


//
// Common form controls
//

.form-control {
    display: block;
    width: 100%;
    height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    padding: $padding-base-vertical $padding-base-horizontal;
    font-size: $font-medium;
    line-height: $line-height-base;
    color: $input-color;
    background-color: $input-bg;
    background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
    border: 1px solid $input-border;
    border-radius: $input-border-radius;
    transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
    box-shadow: inset 0 0 0 rgba(0,0,0,0);

    // Customize the `:focus` state to imitate native WebKit styles.
    //@include form-control-focus(#AAA);

    &:focus {
        //border-color: darken($input-border, 15);
        outline: 0;
        box-shadow: 0 0 0 3px lighten($input-border, 10%);
        //box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $red;
    }

    // Placeholder
    &::placeholder  { color: $input-color-placeholder; }

    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    &[disabled],
    &[readonly],
    fieldset[disabled] & {
        cursor: not-allowed;
        background-color: $input-bg-disabled;
        opacity: 1; // iOS fix for unreadable disabled content
    }

    // [converter] extracted textarea& to textarea.form-control
}

// Reset height for `textarea`s
textarea.form-control {
    height: auto;
}

//
// Search inputs in iOS
//

input[type="search"] {
    -webkit-appearance: none;
}


//
// Special styles for iOS temporal inputs
//

input[type="date"],
input[type="time"],
input[type="datetime-local"],
input[type="month"] {
    line-height: $input-height-base;
    // IE8+ misaligns the text within date inputs, so we reset
    line-height: $line-height-base #{\0};

    &.input-sm {
        line-height: $input-height-small;
    }
    &.input-lg {
        line-height: $input-height-large;
    }
}


//
// Form groups
//

.form-group {
    margin-bottom: 1em;
}


//
// Checkboxes and radios
//

.radio,
.checkbox {
    position: relative;
    display: block;
    min-height: $line-height-computed; // clear the floating input if there is no label text
    margin-top: 0;
    margin-bottom: 5px;
    color: $input-color;

    label {
        padding-left: 20px;
        margin-bottom: 0;
        cursor: pointer;
        text-transform: none;
        font-weight: inherit;
        font-size: $font-medium;
    }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
    position: absolute;
    margin-left: -20px;
    margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
    margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
    display: inline-block;
    padding-left: 20px;
    margin-bottom: 0;
    vertical-align: middle;
    cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
    margin-top: 0;
    margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
input[type="radio"],
input[type="checkbox"] {
    &[disabled],
    &.disabled,
    fieldset[disabled] & {
        cursor: not-allowed;
    }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
    &.disabled,
    fieldset[disabled] & {
        cursor: not-allowed;
    }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
    &.disabled,
    fieldset[disabled] & {
        label {
            cursor: not-allowed;
        }
    }
}


//
// Static form control text
//

.form-control-static {
    // Size it appropriately next to real form controls
    padding-top: ($padding-base-vertical + 1);
    padding-bottom: ($padding-base-vertical + 1);
    // Remove default margin from `p`
    margin-bottom: 0;

    &.input-lg,
    &.input-sm {
        padding-left: 0;
        padding-right: 0;
    }
}


//
// Form control sizing
//

@include input-size('.input-sm', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $line-height-small, $border-radius-small);

@include input-size('.input-lg', $input-height-large, $padding-large-vertical, $padding-large-horizontal, $font-size-large, $line-height-large, $border-radius-large);


//
// Form control feedback states
//

.has-feedback {
    // Enable absolute positioning
    position: relative;

    // Ensure icons don't overlap text
    .form-control {
        padding-right: ($input-height-base * 1.25);
    }
}
// Feedback icon (requires .glyphicon classes)
.form-control-feedback {
    position: absolute;
    top: ($line-height-computed + 5); // Height of the `label` and its margin
    right: 0;
    z-index: 2; // Ensure icon is above input groups
    display: block;
    width: $input-height-base;
    height: $input-height-base;
    line-height: $input-height-base;
    text-align: center;
}
.input-lg + .form-control-feedback {
    width: $input-height-large;
    height: $input-height-large;
    line-height: $input-height-large;
}
.input-sm + .form-control-feedback {
    width: $input-height-small;
    height: $input-height-small;
    line-height: $input-height-small;
}

// Feedback states
.has-success {
    @include form-control-validation($state-success-text, $state-success-text, $state-success-bg);
}
.has-warning {
    @include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);
}
.has-error {
    @include form-control-validation($state-danger-text, $state-danger-border, $state-danger-bg);
}


// Reposition feedback icon if label is hidden with "screenreader only" state
.has-feedback label.sr-only ~ .form-control-feedback {
    top: 0;
}


//
// Help text
//

.help-block {
    display: block; // account for any element using help-block
    margin-top: 5px;
    margin-bottom: 10px;
    color: lighten($input-color, 25%); // lighten the text some for contrast
    font-size: $font-medium;
}
